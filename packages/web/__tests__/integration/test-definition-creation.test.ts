import { describe, it, expect, vi } from "vitest"
import { ApiStorageService } from "@sparktest/storage/api-storage"

// Test the integration between frontend and backend for test definition creation
describe("Test Definition Creation Integration", () => {
  it("should handle creation flow from frontend to backend correctly", async () => {
    // Mock fetch to simulate the backend response
    const mockFetch = vi.fn()
    global.fetch = mockFetch

    // Simulate what the form would send (no id field)
    const formData = {
      name: "Integration Test Definition",
      description: "Test created via form",
      image: "node:18",
      commands: ["npm", "test"],
      createdAt: new Date().toISOString()
    }

    // Simulate backend response with generated ID
    const backendResponse = {
      id: "e9c4e1f5-7a8b-4c9d-a1b2-3456789abcde",
      name: "Integration Test Definition",
      description: "Test created via form",
      image: "node:18", 
      commands: ["npm", "test"],
      created_at: "2024-01-15T10:30:00Z"
    }

    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve(backendResponse),
    })

    const service = new ApiStorageService()
    const result = await service.saveDefinition(formData as any)

    // Verify the request was made correctly (without id)
    expect(mockFetch).toHaveBeenCalledWith("http://localhost:3001/api/test-definitions", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formData), // Form data without id
    })

    // Verify the response includes the generated ID
    expect(result).toMatchObject({
      id: "e9c4e1f5-7a8b-4c9d-a1b2-3456789abcde",
      name: "Integration Test Definition",
      description: "Test created via form",
      image: "node:18",
      commands: ["npm", "test"]
    })

    // Most importantly, verify the ID was generated by the backend
    expect(result.id).toBeDefined()
    expect(result.id).toBe("e9c4e1f5-7a8b-4c9d-a1b2-3456789abcde")
  })

  it("should work with minimal required fields", async () => {
    const mockFetch = vi.fn()
    global.fetch = mockFetch

    // Minimum required fields from form
    const minimalFormData = {
      name: "Minimal Test",
      description: "", // Empty description should work
      image: "ubuntu:latest",
      commands: ["echo", "hello"],
      createdAt: new Date().toISOString()
    }

    const backendResponse = {
      id: "minimal-test-uuid",
      name: "Minimal Test",
      description: null, // Backend might return null for empty description
      image: "ubuntu:latest",
      commands: ["echo", "hello"],
      created_at: "2024-01-15T10:30:00Z"
    }

    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve(backendResponse),
    })

    const service = new ApiStorageService()
    const result = await service.saveDefinition(minimalFormData as any)

    expect(result.id).toBe("minimal-test-uuid")
    expect(result.name).toBe("Minimal Test")
  })
})