import { Definition, Executor, Run, Suite } from "./types"

// Sample Suites
export const sampleSuites: Suite[] = [
  {
    id: "frontend-test-suite",
    name: "Frontend Test Suite",
    description: "Comprehensive frontend testing including React components, E2E user journeys, and visual regression tests",
    testDefinitionIds: ["react-component-tests", "e2e-user-journey", "cypress-e2e-tests"],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    executionMode: "sequential",
    labels: ["frontend", "react", "e2e", "ui"],
  },
  {
    id: "backend-api-suite",
    name: "Backend API Test Suite",
    description: "Complete backend API testing including REST endpoints, authentication, and database operations",
    testDefinitionIds: ["api-integration-tests", "python-backend-tests", "postman-api-tests"],
    createdAt: new Date(Date.now() - 172800000).toISOString(),
    executionMode: "parallel",
    labels: ["backend", "api", "integration", "authentication"],
  },
  {
    id: "performance-suite",
    name: "Performance Test Suite",
    description: "Load testing and performance benchmarks to ensure application scalability",
    testDefinitionIds: ["k6-load-tests"],
    createdAt: new Date(Date.now() - 259200000).toISOString(),
    executionMode: "sequential",
    labels: ["performance", "load", "scalability", "k6"],
  },
  {
    id: "security-suite",
    name: "Security Test Suite",
    description: "Comprehensive security testing including vulnerability scanning and penetration testing",
    testDefinitionIds: ["security-scan-owasp"],
    createdAt: new Date(Date.now() - 345600000).toISOString(),
    executionMode: "sequential",
    labels: ["security", "vulnerability", "owasp", "penetration"],
  },
  {
    id: "ci-cd-suite",
    name: "CI/CD Pipeline Test Suite",
    description: "Complete CI/CD pipeline testing including build, test, and deployment validation",
    testDefinitionIds: ["github-actions-ci", "docker-integration-tests"],
    createdAt: new Date(Date.now() - 432000000).toISOString(),
    executionMode: "sequential",
    labels: ["ci", "cd", "pipeline", "deployment", "docker"],
  },
  {
    id: "mobile-suite",
    name: "Mobile Application Test Suite",
    description: "Mobile app testing for React Native applications on iOS and Android platforms",
    testDefinitionIds: ["mobile-app-tests"],
    createdAt: new Date(Date.now() - 518400000).toISOString(),
    executionMode: "sequential",
    labels: ["mobile", "react-native", "ios", "android"],
  },
  {
    id: "regression-suite",
    name: "Regression Test Suite",
    description: "Automated regression testing to ensure new changes don't break existing functionality",
    testDefinitionIds: ["react-component-tests", "api-integration-tests", "e2e-user-journey"],
    createdAt: new Date(Date.now() - 604800000).toISOString(),
    executionMode: "parallel",
    labels: ["regression", "automated", "stability"],
  },
  {
    id: "working-examples-suite",
    name: "Working Examples Suite",
    description: "Collection of simple, self-contained tests that demonstrate the platform capabilities and will actually run successfully",
    testDefinitionIds: [
      "simple-health-check",
      "basic-python-test", 
      "node-version-test",
      "shell-script-test",
      "network-connectivity-test",
      "basic-math-test",
      "date-time-test",
      "file-system-test",
      "environment-test",
      "json-processing-test"
    ],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    executionMode: "parallel",
    labels: ["working", "examples", "demo", "basic"],
  },
]

// Sample Definitions
export const sampleDefinitions: Definition[] = [
  {
    id: "react-component-tests",
    name: "React Component Unit Tests",
    description: "Test React components with Jest and React Testing Library including hooks, state management, and user interactions",
    image: "node:18-alpine",
    commands: ["npm ci", "npm run test:unit -- --coverage --watchAll=false"],
    createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
    executorId: "jest-executor",
    variables: {
      NODE_ENV: "test",
      CI: "true",
      COVERAGE_THRESHOLD: "80",
    },
    labels: ["react", "unit", "jest", "frontend"],
  },
  {
    id: "api-integration-tests",
    name: "REST API Integration Tests",
    description: "Test REST API endpoints with authentication, CRUD operations, validation, and error handling",
    image: "node:18-alpine",
    commands: ["npm ci", "npm run test:api -- --reporter=json --output=api-test-results.json"],
    createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
    executorId: "jest-executor",
    variables: {
      API_BASE_URL: "https://api.staging.example.com",
      TEST_USER_EMAIL: "test@example.com",
      TEST_USER_PASSWORD: "test123!",
      JWT_SECRET: "test-jwt-secret",
    },
    labels: ["api", "integration", "backend", "rest"],
  },
  {
    id: "e2e-user-journey",
    name: "E2E User Journey Tests",
    description: "Complete user journey testing: signup, login, product browsing, checkout, and order management",
    image: "mcr.microsoft.com/playwright:v1.40.0-focal",
    commands: ["npm ci", "npx playwright install", "npx playwright test --reporter=html"],
    createdAt: new Date(Date.now() - 259200000).toISOString(), // 3 days ago
    executorId: "playwright-executor",
    variables: {
      BASE_URL: "https://staging.example.com",
      HEADLESS: "true",
      BROWSER: "chromium",
      VIEWPORT_WIDTH: "1920",
      VIEWPORT_HEIGHT: "1080",
    },
    labels: ["e2e", "playwright", "user-journey", "frontend"],
  },
  {
    id: "cypress-e2e-tests",
    name: "Cypress E2E Test Suite",
    description: "Cross-browser end-to-end testing with Cypress including visual regression tests",
    image: "cypress/included:12.17.4",
    commands: ["npm ci", "npx cypress run --browser chrome --record --key $CYPRESS_RECORD_KEY"],
    createdAt: new Date(Date.now() - 345600000).toISOString(), // 4 days ago
    executorId: "cypress-executor",
    variables: {
      CYPRESS_baseUrl: "https://staging.example.com",
      CYPRESS_RECORD_KEY: "your-record-key",
      CYPRESS_video: "true",
      CYPRESS_screenshotOnRunFailure: "true",
    },
    labels: ["e2e", "cypress", "visual", "regression"],
  },
  {
    id: "python-backend-tests",
    name: "Python Backend API Tests",
    description: "Test Django/Flask backend APIs with pytest including database transactions and async operations",
    image: "python:3.11-slim",
    commands: ["pip install -r requirements.txt", "pytest --cov=app --cov-report=html --junit-xml=test-results.xml"],
    createdAt: new Date(Date.now() - 432000000).toISOString(), // 5 days ago
    executorId: "pytest-executor",
    variables: {
      DATABASE_URL: "postgresql://test:test@localhost:5432/testdb",
      DJANGO_SETTINGS_MODULE: "app.settings.test",
      PYTHONPATH: "/app",
      COVERAGE_THRESHOLD: "85",
    },
    labels: ["python", "backend", "pytest", "django"],
  },
  {
    id: "k6-load-tests",
    name: "K6 Performance Load Tests",
    description: "Load testing with K6 to simulate real user traffic and measure performance metrics",
    image: "grafana/k6:latest",
    commands: ["k6 run --vus 100 --duration 10m --out json=load-test-results.json load-test.js"],
    createdAt: new Date(Date.now() - 518400000).toISOString(), // 6 days ago
    executorId: "k6-executor",
    variables: {
      TARGET_URL: "https://api.staging.example.com",
      VUS: "100",
      DURATION: "10m",
      THRESHOLD_P95: "500",
      THRESHOLD_ERROR_RATE: "0.1",
    },
    labels: ["performance", "load", "k6", "scalability"],
  },
  {
    id: "postman-api-tests",
    name: "Postman API Collection Tests",
    description: "Run comprehensive API tests using Postman collections with Newman including authentication flows",
    image: "postman/newman:alpine",
    commands: ["newman run api-tests.postman_collection.json -e staging.postman_environment.json --reporters cli,json"],
    createdAt: new Date(Date.now() - 604800000).toISOString(), // 7 days ago
    executorId: "postman-executor",
    variables: {
      POSTMAN_API_KEY: "your-api-key",
      BASE_URL: "https://api.staging.example.com",
      AUTH_TOKEN: "bearer-token",
    },
    labels: ["api", "postman", "newman", "collection"],
  },
  {
    id: "security-scan-owasp",
    name: "OWASP Security Scan",
    description: "Automated security testing using OWASP ZAP for vulnerability detection and penetration testing",
    image: "owasp/zap2docker-stable",
    commands: ["zap-baseline.py -t $TARGET_URL -r security-report.html -J security-report.json"],
    createdAt: new Date(Date.now() - 691200000).toISOString(), // 8 days ago
    executorId: "docker-executor",
    variables: {
      TARGET_URL: "https://staging.example.com",
      ZAP_PROXY: "http://localhost:8080",
    },
    labels: ["security", "owasp", "vulnerability", "penetration"],
  },
  {
    id: "github-actions-ci",
    name: "GitHub Actions CI Pipeline",
    description: "Complete CI/CD pipeline with GitHub Actions including linting, testing, building, and deployment",
    image: "ghcr.io/actions/actions-runner:latest",
    commands: ["./run-ci-pipeline.sh"],
    createdAt: new Date(Date.now() - 777600000).toISOString(), // 9 days ago
    executorId: "github-actions-executor",
    variables: {
      GITHUB_TOKEN: "github-token",
      BRANCH: "main",
      DEPLOY_ENV: "staging",
    },
    labels: ["ci", "github-actions", "pipeline", "deployment"],
  },
  {
    id: "docker-integration-tests",
    name: "Docker Integration Tests",
    description: "Test Docker containers and microservices integration with docker-compose and health checks",
    image: "docker:latest",
    commands: ["docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit"],
    createdAt: new Date(Date.now() - 864000000).toISOString(), // 10 days ago
    executorId: "docker-executor",
    variables: {
      COMPOSE_FILE: "docker-compose.test.yml",
      DOCKER_BUILDKIT: "1",
      COMPOSE_PROJECT_NAME: "sparktest",
    },
    labels: ["docker", "integration", "microservices", "containers"],
  },
  {
    id: "mobile-app-tests",
    name: "Mobile App Testing",
    description: "Test React Native mobile app with Detox framework on iOS and Android simulators",
    image: "detox/detox:latest",
    commands: ["npm ci", "detox test --configuration ios.sim.release"],
    createdAt: new Date(Date.now() - 950400000).toISOString(), // 11 days ago
    executorId: "jest-executor",
    variables: {
      DETOX_CONFIGURATION: "ios.sim.release",
      PLATFORM: "ios",
      DEVICE: "iPhone 14 Pro",
    },
    labels: ["mobile", "react-native", "detox", "ios", "android"],
  },
  // Working test examples that can actually run through the K8s backend
  {
    id: "simple-health-check",
    name: "Simple Health Check",
    description: "Basic system health check using curl to test network connectivity",
    image: "curlimages/curl:latest",
    commands: ["curl -f -s -o /dev/null -w \"%{http_code}\" https://httpbin.org/status/200 && echo \"Health check passed\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "health"],
  },
  {
    id: "basic-python-test",
    name: "Basic Python Test",
    description: "Simple Python test that runs without external dependencies",
    image: "python:3.9-slim",
    commands: ["python -c \"import sys; print(f'Python version: {sys.version}'); assert 2 + 2 == 4; print('Basic math test passed')\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "python"],
  },
  {
    id: "node-version-test",
    name: "Node.js Version Test",
    description: "Test Node.js installation and basic functionality",
    image: "node:18-alpine",
    commands: ["node -e \"console.log('Node.js version:', process.version); console.log('Test passed: 2 + 2 =', 2 + 2); process.exit(0)\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "nodejs"],
  },
  {
    id: "shell-script-test",
    name: "Shell Script Test",
    description: "Basic shell script test with system commands",
    image: "alpine:latest",
    commands: ["sh -c \"echo 'Starting shell test'; whoami; pwd; ls -la /; echo 'Shell test completed successfully'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "shell"],
  },
  {
    id: "network-connectivity-test",
    name: "Network Connectivity Test",
    description: "Test network connectivity to external services",
    image: "alpine:latest",
    commands: ["sh -c \"apk add --no-cache curl && curl -f -s https://httpbin.org/json && echo 'Network test passed'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "network"],
  },
  {
    id: "basic-math-test",
    name: "Basic Math Test",
    description: "Simple mathematical computation test using bc",
    image: "alpine:latest",
    commands: ["sh -c \"apk add --no-cache bc && echo 'scale=2; 22/7' | bc && echo 'Math test completed'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "math"],
  },
  {
    id: "date-time-test",
    name: "Date Time Test",
    description: "Test system date and time functionality",
    image: "alpine:latest",
    commands: ["sh -c \"date && echo 'Timezone: $(date +%Z)' && echo 'Epoch: $(date +%s)' && echo 'Date test passed'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "datetime"],
  },
  {
    id: "file-system-test",
    name: "File System Test",
    description: "Test file system operations and permissions",
    image: "alpine:latest",
    commands: ["sh -c \"mkdir -p /tmp/test && echo 'Hello World' > /tmp/test/file.txt && cat /tmp/test/file.txt && rm -rf /tmp/test && echo 'File system test passed'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "filesystem"],
  },
  {
    id: "environment-test",
    name: "Environment Test",
    description: "Test environment variables and system information",
    image: "alpine:latest",
    commands: ["sh -c \"echo 'Hostname: $(hostname)'; echo 'User: $(whoami)'; echo 'Home: $HOME'; echo 'Path: $PATH'; echo 'Environment test passed'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "environment"],
  },
  {
    id: "json-processing-test",
    name: "JSON Processing Test",
    description: "Test JSON processing using jq",
    image: "alpine:latest",
    commands: ["sh -c \"apk add --no-cache jq && echo '{\\\"name\\\":\\\"SparkTest\\\",\\\"version\\\":\\\"1.0\\\",\\\"working\\\":true}' | jq '.name' && echo 'JSON test passed'\""],
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    labels: ["working", "examples", "demo", "json"],
  },
]

// Sample Runs
export const sampleRuns: Run[] = [
  {
    id: "run-react-components",
    name: "React Component Unit Tests - PR #247",
    image: "node:18-alpine",
    command: ["npm ci", "npm run test:unit -- --coverage --watchAll=false"],
    status: "completed",
    createdAt: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago
    definitionId: "react-component-tests",
    executorId: "jest-executor",
    variables: {
      NODE_ENV: "test",
      CI: "true",
      COVERAGE_THRESHOLD: "80",
    },
    artifacts: ["coverage-report.html", "test-results.json", "junit.xml"],
    duration: 145000, // 2 minutes 25 seconds
    logs: [
      "> Starting React component unit tests...",
      "> npm ci",
      "added 1247 packages in 32s",
      "> npm run test:unit -- --coverage --watchAll=false",
      "",
      "PASS src/components/Button/Button.test.tsx",
      "  Button Component",
      "    ✓ renders with default props (23ms)",
      "    ✓ renders with custom text (8ms)",
      "    ✓ handles click events (12ms)",
      "    ✓ applies custom className (5ms)",
      "",
      "PASS src/components/Modal/Modal.test.tsx",
      "  Modal Component",
      "    ✓ renders when open (15ms)",
      "    ✓ does not render when closed (4ms)",
      "    ✓ calls onClose when backdrop clicked (18ms)",
      "",
      "PASS src/hooks/useLocalStorage.test.ts",
      "  useLocalStorage Hook",
      "    ✓ returns initial value (12ms)",
      "    ✓ updates localStorage on setValue (16ms)",
      "    ✓ reads from localStorage on mount (8ms)",
      "",
      "Test Suites: 24 passed, 24 total",
      "Tests:       147 passed, 147 total",
      "Snapshots:   0 total",
      "Time:        142.45 s",
      "Ran all test suites.",
      "",
      "Coverage Summary:",
      "  Statements   : 94.2% (1847/1960)",
      "  Branches     : 89.7% (523/583)",
      "  Functions    : 92.1% (387/420)",
      "  Lines        : 94.8% (1798/1896)",
      "",
      "✅ All tests passed! Coverage above 80% threshold.",
    ],
  },
  {
    id: "run-api-integration",
    name: "REST API Integration Tests - Staging Deploy",
    image: "node:18-alpine",
    command: ["npm ci", "npm run test:api -- --reporter=json --output=api-test-results.json"],
    status: "completed",
    createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago
    definitionId: "api-integration-tests",
    executorId: "jest-executor",
    variables: {
      API_BASE_URL: "https://api.staging.example.com",
      TEST_USER_EMAIL: "test@example.com",
      JWT_SECRET: "test-jwt-secret",
    },
    artifacts: ["api-test-results.json", "newman-report.html"],
    duration: 187000, // 3 minutes 7 seconds
    logs: [
      "> Starting REST API integration tests...",
      "> npm ci",
      "added 892 packages in 28s",
      "> npm run test:api -- --reporter=json --output=api-test-results.json",
      "",
      "PASS tests/api/auth.test.js",
      "  Authentication API",
      "    ✓ POST /api/auth/login - valid credentials (245ms)",
      "    ✓ POST /api/auth/login - invalid credentials (156ms)",
      "    ✓ POST /api/auth/refresh - valid token (89ms)",
      "    ✓ POST /api/auth/logout - authenticated user (76ms)",
      "",
      "PASS tests/api/users.test.js",
      "  Users API",
      "    ✓ GET /api/users - list users (134ms)",
      "    ✓ GET /api/users/:id - get user by id (98ms)",
      "    ✓ POST /api/users - create new user (187ms)",
      "    ✓ PUT /api/users/:id - update user (156ms)",
      "    ✓ DELETE /api/users/:id - delete user (123ms)",
      "",
      "PASS tests/api/products.test.js",
      "  Products API",
      "    ✓ GET /api/products - list products with pagination (167ms)",
      "    ✓ GET /api/products/:id - get product details (87ms)",
      "    ✓ POST /api/products - create product (admin only) (201ms)",
      "    ✓ PUT /api/products/:id - update product (145ms)",
      "",
      "PASS tests/api/orders.test.js",
      "  Orders API",
      "    ✓ POST /api/orders - create order (234ms)",
      "    ✓ GET /api/orders - get user orders (112ms)",
      "    ✓ GET /api/orders/:id - get order details (98ms)",
      "    ✓ PUT /api/orders/:id/status - update order status (134ms)",
      "",
      "Test Suites: 4 passed, 4 total",
      "Tests:       17 passed, 17 total",
      "Time:        156.78 s",
      "",
      "✅ All API integration tests passed!",
      "📊 Test results exported to api-test-results.json",
    ],
  },
  {
    id: "run-e2e-playwright",
    name: "E2E User Journey Tests - Chrome",
    image: "mcr.microsoft.com/playwright:v1.40.0-focal",
    command: ["npm ci", "npx playwright install", "npx playwright test --reporter=html"],
    status: "running",
    createdAt: new Date(Date.now() - 900000).toISOString(), // 15 minutes ago
    definitionId: "e2e-user-journey",
    executorId: "playwright-executor",
    variables: {
      BASE_URL: "https://staging.example.com",
      HEADLESS: "true",
      BROWSER: "chromium",
    },
    artifacts: ["playwright-report.html", "test-results.json"],
    logs: [
      "> Starting Playwright E2E tests...",
      "> npm ci",
      "added 1143 packages in 41s",
      "> npx playwright install",
      "Downloading Chromium 119.0.6045.9 (playwright build v1091)...",
      "Downloading Firefox 118.0.2 (playwright build v1427)...",
      "Downloading Webkit 17.0 (playwright build v1883)...",
      "✅ Browsers downloaded successfully",
      "",
      "> npx playwright test --reporter=html",
      "",
      "Running 12 tests using 4 workers",
      "",
      "  ✓ [chromium] › auth/login.spec.ts:3:1 › User can login with valid credentials (2.3s)",
      "  ✓ [chromium] › auth/login.spec.ts:8:1 › User sees error with invalid credentials (1.8s)",
      "  ✓ [chromium] › products/browse.spec.ts:3:1 › User can browse products (3.2s)",
      "  ✓ [chromium] › products/search.spec.ts:3:1 › User can search for products (2.7s)",
      "  ✓ [chromium] › cart/add-to-cart.spec.ts:3:1 › User can add products to cart (4.1s)",
      "  ⏳ [chromium] › cart/checkout.spec.ts:3:1 › User can complete checkout process",
      "  ⏳ [chromium] › profile/update.spec.ts:3:1 › User can update profile information",
      "  ⏳ [chromium] › orders/history.spec.ts:3:1 › User can view order history",
      "",
      "Currently running: 4 tests in parallel...",
    ],
  },
  {
    id: "run-k6-load-test",
    name: "K6 Performance Load Tests - API Stress Test",
    image: "grafana/k6:latest",
    command: ["k6 run --vus 100 --duration 10m --out json=load-test-results.json load-test.js"],
    status: "failed",
    createdAt: new Date(Date.now() - 7200000).toISOString(), // 2 hours ago
    definitionId: "k6-load-tests",
    executorId: "k6-executor",
    variables: {
      TARGET_URL: "https://api.staging.example.com",
      VUS: "100",
      DURATION: "10m",
    },
    artifacts: ["load-test-results.json", "performance-summary.html"],
    duration: 285000, // 4 minutes 45 seconds
    logs: [
      "> Starting K6 load tests...",
      "> k6 run --vus 100 --duration 10m --out json=load-test-results.json load-test.js",
      "",
      "          /\\      |‾‾| /‾‾/   /‾‾/",
      "     /\\  /  \\     |  |/  /   /  /",
      "    /  \\/    \\    |     (   /   ‾‾\\",
      "   /          \\   |  |\\  \\ |  (‾)  |",
      "  / __________ \\  |__| \\__\\ \\_____/ .io",
      "",
      "  execution: local",
      "     script: load-test.js",
      "     output: json (load-test-results.json)",
      "",
      "  scenarios: (100.00%) 1 scenario, 100 max VUs, 10m30s max duration",
      "           * default: 100 looping VUs for 10m0s (gracefulRampDown: 30s)",
      "",
      "running (04m45s), 000/100 VUs, 14523 complete and 0 interrupted iterations",
      "",
      "✗ status was 200",
      " ↳  92% — ✓ 13361 / ✗ 1162",
      "✗ response time < 500ms",
      " ↳  78% — ✓ 11328 / ✗ 3195",
      "",
      "     data_received..................: 145 MB  507 kB/s",
      "     data_sent......................: 23 MB   79 kB/s",
      "     http_req_blocked...............: avg=5.23ms   min=0s       med=1.2ms    max=2.1s     p(90)=2.8ms    p(95)=4.7ms",
      "     http_req_connecting............: avg=2.1ms    min=0s       med=0s       max=487ms    p(90)=0s       p(95)=0s",
      "     http_req_duration..............: avg=1.89s    min=134ms    med=1.2s     max=8.7s     p(90)=3.4s     p(95)=4.8s",
      "     http_req_failed................: 8.00%   ✓ 1162      ✗ 13361",
      "     http_req_receiving.............: avg=45ms     min=0s       med=12ms     max=2.1s     p(90)=87ms     p(95)=156ms",
      "     http_req_sending...............: avg=2.1ms    min=0s       med=0s       max=234ms    p(90)=0s       p(95)=1ms",
      "     http_req_waiting...............: avg=1.84s    min=133ms    med=1.18s    max=8.6s     p(90)=3.3s     p(95)=4.7s",
      "     http_reqs......................: 14523   50.8/s",
      "     iteration_duration.............: avg=1.92s    min=135ms    med=1.22s    max=8.8s     p(90)=3.5s     p(95)=4.9s",
      "     iterations.....................: 14523   50.8/s",
      "     vus............................: 100     min=100     max=100",
      "     vus_max........................: 100     min=100     max=100",
      "",
      "❌ Performance test failed - 8% error rate exceeds 0.1% threshold",
      "❌ 78% of requests exceeded 500ms response time threshold",
      "⚠️  High response times detected - investigate server performance",
    ],
  },
  {
    id: "run-python-backend",
    name: "Python Backend API Tests - Django",
    image: "python:3.11-slim",
    command: ["pip install -r requirements.txt", "pytest --cov=app --cov-report=html --junit-xml=test-results.xml"],
    status: "completed",
    createdAt: new Date(Date.now() - 10800000).toISOString(), // 3 hours ago
    definitionId: "python-backend-tests",
    executorId: "pytest-executor",
    variables: {
      DATABASE_URL: "postgresql://test:test@localhost:5432/testdb",
      DJANGO_SETTINGS_MODULE: "app.settings.test",
    },
    artifacts: ["htmlcov/index.html", "test-results.xml", "pytest-report.json"],
    duration: 234000, // 3 minutes 54 seconds
    logs: [
      "> Starting Python backend tests...",
      "> pip install -r requirements.txt",
      "Collecting Django==4.2.0",
      "Collecting pytest==7.4.0",
      "Collecting pytest-cov==4.1.0",
      "Collecting pytest-django==4.5.2",
      "Successfully installed Django-4.2.0 pytest-7.4.0 pytest-cov-4.1.0 pytest-django-4.5.2",
      "",
      "> pytest --cov=app --cov-report=html --junit-xml=test-results.xml",
      "",
      "========================== test session starts ===========================",
      "platform linux -- Python 3.11.5, pytest-7.4.0, pluggy-1.2.0",
      "rootdir: /app",
      "plugins: cov-4.1.0, django-4.5.2",
      "collected 89 items",
      "",
      "tests/test_models.py::TestUserModel::test_user_creation PASSED         [ 1%]",
      "tests/test_models.py::TestUserModel::test_user_str_representation PASSED [ 2%]",
      "tests/test_models.py::TestProductModel::test_product_creation PASSED  [ 3%]",
      "tests/test_models.py::TestProductModel::test_product_slug_generation PASSED [ 4%]",
      "tests/test_views.py::TestUserViews::test_user_list_view PASSED        [ 5%]",
      "tests/test_views.py::TestUserViews::test_user_detail_view PASSED      [ 6%]",
      "tests/test_views.py::TestUserViews::test_user_create_view PASSED      [ 7%]",
      "tests/test_views.py::TestProductViews::test_product_list_view PASSED  [ 8%]",
      "tests/test_views.py::TestProductViews::test_product_detail_view PASSED [ 9%]",
      "tests/test_api.py::TestAuthAPI::test_login_success PASSED            [10%]",
      "tests/test_api.py::TestAuthAPI::test_login_failure PASSED            [11%]",
      "tests/test_api.py::TestAuthAPI::test_token_refresh PASSED            [12%]",
      "tests/test_api.py::TestProductAPI::test_product_list PASSED          [13%]",
      "tests/test_api.py::TestProductAPI::test_product_create PASSED        [14%]",
      "tests/test_api.py::TestProductAPI::test_product_update PASSED        [15%]",
      "tests/test_api.py::TestProductAPI::test_product_delete PASSED        [16%]",
      "...",
      "tests/test_utils.py::TestUtilityFunctions::test_generate_slug PASSED [100%]",
      "",
      "========================== 89 passed in 187.23s ==========================",
      "",
      "Coverage Report:",
      "Name                 Stmts   Miss  Cover   Missing",
      "app/models.py          145     8    94%    23-24, 67, 89-92",
      "app/views.py           234    12    95%    45-47, 123, 189-195",
      "app/serializers.py      89     3    97%    34, 67-68",
      "app/utils.py            67     2    97%    45, 78",
      "app/tasks.py            45     5    89%    12-16",
      "TOTAL                  580    30    95%",
      "",
      "✅ All tests passed! Coverage: 95% (above 85% threshold)",
      "📊 HTML coverage report generated: htmlcov/index.html",
    ],
  },
  {
    id: "run-cypress-e2e",
    name: "Cypress E2E Test Suite - Chrome Browser",
    image: "cypress/included:12.17.4",
    command: ["npm ci", "npx cypress run --browser chrome --record"],
    status: "completed",
    createdAt: new Date(Date.now() - 14400000).toISOString(), // 4 hours ago
    definitionId: "cypress-e2e-tests",
    executorId: "cypress-executor",
    variables: {
      CYPRESS_baseUrl: "https://staging.example.com",
      CYPRESS_video: "true",
      CYPRESS_screenshotOnRunFailure: "true",
    },
    artifacts: ["cypress/videos/", "cypress/screenshots/", "cypress/reports/"],
    duration: 425000, // 7 minutes 5 seconds
    logs: [
      "> Starting Cypress E2E tests...",
      "> npm ci",
      "added 987 packages in 35s",
      "> npx cypress run --browser chrome --record",
      "",
      "====================================================================================================",
      "",
      "  (Run Starting)",
      "",
      "  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐",
      "  │ Cypress:    12.17.4                                                                               │",
      "  │ Browser:    Chrome 119.0.6045.123                                                                │",
      "  │ Specs:      8 found (auth.cy.js, products.cy.js, cart.cy.js, checkout.cy.js, profile.cy.js, .. │",
      "  │ Searched:   cypress/e2e/**/*.cy.{js,jsx,ts,tsx}                                                  │",
      "  └────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "",
      "",
      "────────────────────────────────────────────────────────────────────────────────────────────────────",
      "                                                                                                        ",
      "  Running:  auth.cy.js                                                                       (1 of 8)",
      "",
      "",
      "  Authentication Flow",
      "    ✓ should login with valid credentials (2456ms)",
      "    ✓ should show error for invalid credentials (1234ms)",
      "    ✓ should logout successfully (892ms)",
      "    ✓ should redirect to login when accessing protected route (1124ms)",
      "",
      "",
      "  4 passing (5.7s)",
      "",
      "  (Results)",
      "  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐",
      "  │ Tests:        4                                                                                    │",
      "  │ Passing:      4                                                                                    │",
      "  │ Failing:      0                                                                                    │",
      "  │ Pending:      0                                                                                    │",
      "  │ Skipped:      0                                                                                    │",
      "  │ Screenshots:  0                                                                                    │",
      "  │ Video:        true                                                                                 │",
      "  │ Duration:     5 seconds                                                                            │",
      "  │ Spec Ran:     auth.cy.js                                                                           │",
      "  └────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "",
      "  ...",
      "",
      "  (Run Finished)",
      "       Spec                                              Tests  Passing  Failing  Pending  Skipped  ",
      "  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐",
      "  │ ✓  auth.cy.js                               00:05        4        4        0        0        0 │",
      "  │ ✓  products.cy.js                           00:08        6        6        0        0        0 │",
      "  │ ✓  cart.cy.js                               00:12        8        8        0        0        0 │",
      "  │ ✓  checkout.cy.js                           00:15       12       12        0        0        0 │",
      "  │ ✓  profile.cy.js                            00:07        5        5        0        0        0 │",
      "  │ ✓  orders.cy.js                             00:09        7        7        0        0        0 │",
      "  │ ✓  admin.cy.js                              00:11        9        9        0        0        0 │",
      "  │ ✓  search.cy.js                             00:06        4        4        0        0        0 │",
      "  └────────────────────────────────────────────────────────────────────────────────────────────────┘",
      "    ✓  All specs passed!                        07:03       55       55        0        0        0 ",
      "",
      "✅ All Cypress tests passed! 55/55 tests completed successfully",
      "🎥 Videos recorded for all test runs",
      "📊 Test results uploaded to Cypress Dashboard",
    ],
  },
  {
    id: "run-security-owasp",
    name: "OWASP Security Vulnerability Scan",
    image: "owasp/zap2docker-stable",
    command: ["zap-baseline.py -t https://staging.example.com -r security-report.html -J security-report.json"],
    status: "failed",
    createdAt: new Date(Date.now() - 18000000).toISOString(), // 5 hours ago
    definitionId: "security-scan-owasp",
    executorId: "docker-executor",
    variables: {
      TARGET_URL: "https://staging.example.com",
      ZAP_PROXY: "http://localhost:8080",
    },
    artifacts: ["security-report.html", "security-report.json"],
    duration: 892000, // 14 minutes 52 seconds
    logs: [
      "> Starting OWASP ZAP security scan...",
      "> zap-baseline.py -t https://staging.example.com -r security-report.html -J security-report.json",
      "",
      "2025-07-18 10:11:23,456 Starting ZAP 2.14.0",
      "2025-07-18 10:11:25,123 ZAP is now listening on 0.0.0.0:8080",
      "2025-07-18 10:11:26,789 Baseline scan started",
      "2025-07-18 10:11:27,234 Target: https://staging.example.com",
      "",
      "Spider progress: 0% (0 URLs found)",
      "Spider progress: 15% (47 URLs found)",
      "Spider progress: 32% (89 URLs found)",
      "Spider progress: 58% (124 URLs found)",
      "Spider progress: 78% (156 URLs found)",
      "Spider progress: 100% (178 URLs found)",
      "",
      "Active scan progress: 0% (0 URLs scanned)",
      "Active scan progress: 12% (21 URLs scanned)",
      "Active scan progress: 34% (61 URLs scanned)",
      "Active scan progress: 67% (119 URLs scanned)",
      "Active scan progress: 89% (159 URLs scanned)",
      "Active scan progress: 100% (178 URLs scanned)",
      "",
      "PASS: Cookie No HttpOnly Flag [10010]",
      "PASS: Cookie Without Secure Flag [10011]",
      "PASS: Incomplete or No Cache-control Header Set [10015]",
      "PASS: Cross-Domain JavaScript Source File Inclusion [10017]",
      "PASS: Content-Type Header Missing [10019]",
      "PASS: Information Disclosure - Debug Error Messages [10023]",
      "PASS: Information Disclosure - Sensitive Information in URL [10024]",
      "PASS: Information Disclosure - Sensitive Information in HTTP Referrer Header [10025]",
      "PASS: HTTP Parameter Override [10026]",
      "PASS: Information Disclosure - Suspicious Comments [10027]",
      "PASS: Open Redirect [10028]",
      "PASS: Cookie Poisoning [10029]",
      "PASS: User Controllable Charset [10030]",
      "PASS: User Controllable HTML Element Attribute (Potential XSS) [10031]",
      "PASS: Viewstate [10032]",
      "PASS: Directory Browsing [10033]",
      "PASS: Heartbleed OpenSSL Vulnerability (Indicative) [10034]",
      "PASS: Strict-Transport-Security Header [10035]",
      "PASS: Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s) [10037]",
      "PASS: Content Security Policy (CSP) Header Not Set [10038]",
      "PASS: X-Backend-Server Header Information Leak [10039]",
      "",
      "WARN: X-Frame-Options Header [10020] x 3",
      "        https://staging.example.com/",
      "        https://staging.example.com/products",
      "        https://staging.example.com/cart",
      "",
      "WARN: X-Content-Type-Options Header Missing [10021] x 5",
      "        https://staging.example.com/",
      "        https://staging.example.com/api/products",
      "        https://staging.example.com/api/users",
      "        https://staging.example.com/static/css/main.css",
      "        https://staging.example.com/static/js/main.js",
      "",
      "FAIL: SQL Injection [90018] x 2",
      "        https://staging.example.com/api/products?category=",
      "        https://staging.example.com/api/search?q=",
      "",
      "FAIL: Cross Site Scripting (Reflected) [40012] x 1",
      "        https://staging.example.com/search?term=",
      "",
      "SUMMARY",
      "-------",
      "Total alerts: 11",
      "High: 2 (SQL Injection, XSS)",
      "Medium: 3 (X-Frame-Options missing)",
      "Low: 5 (X-Content-Type-Options missing)",
      "Informational: 1",
      "",
      "❌ Security scan failed - 2 high-risk vulnerabilities found",
      "⚠️  SQL Injection vulnerabilities detected in API endpoints",
      "⚠️  XSS vulnerability found in search functionality",
      "📋 Detailed report saved to security-report.html",
    ],
  },
  // Working example runs that demonstrate successful execution
  {
    id: "working-health-check-run",
    name: "Health Check - Working Example",
    image: "curlimages/curl:latest",
    command: ["curl -f -s -o /dev/null -w \"%{http_code}\" https://httpbin.org/status/200 && echo \"Health check passed\""],
    status: "completed",
    createdAt: new Date(Date.now() - 300000).toISOString(), // 5 minutes ago
    definitionId: "simple-health-check",
    duration: 5000, // 5 seconds
    logs: [
      "> curl -f -s -o /dev/null -w \"%{http_code}\" https://httpbin.org/status/200 && echo \"Health check passed\"",
      "200Health check passed",
      "",
      "✅ Test completed successfully"
    ],
  },
  {
    id: "working-python-test-run",
    name: "Python Test - Working Example",
    image: "python:3.9-slim",
    command: ["python -c \"import sys; print(f'Python version: {sys.version}'); assert 2 + 2 == 4; print('Basic math test passed')\""],
    status: "completed",
    createdAt: new Date(Date.now() - 600000).toISOString(), // 10 minutes ago
    definitionId: "basic-python-test",
    duration: 3000, // 3 seconds
    logs: [
      "> python -c \"import sys; print(f'Python version: {sys.version}'); assert 2 + 2 == 4; print('Basic math test passed')\"",
      "Python version: 3.9.18 (main, Jan 24 2024, 22:56:09) [GCC 12.2.0]",
      "Basic math test passed",
      "",
      "✅ Test completed successfully"
    ],
  },
  {
    id: "working-node-test-run",
    name: "Node.js Test - Working Example",
    image: "node:18-alpine",
    command: ["node -e \"console.log('Node.js version:', process.version); console.log('Test passed: 2 + 2 =', 2 + 2); process.exit(0)\""],
    status: "completed",
    createdAt: new Date(Date.now() - 900000).toISOString(), // 15 minutes ago
    definitionId: "node-version-test",
    duration: 2000, // 2 seconds
    logs: [
      "> node -e \"console.log('Node.js version:', process.version); console.log('Test passed: 2 + 2 =', 2 + 2); process.exit(0)\"",
      "Node.js version: v18.18.2",
      "Test passed: 2 + 2 = 4",
      "",
      "✅ Test completed successfully"
    ],
  },
  {
    id: "working-shell-test-run",
    name: "Shell Script Test - Working Example",
    image: "alpine:latest",
    command: ["sh -c \"echo 'Starting shell test'; whoami; pwd; ls -la /; echo 'Shell test completed successfully'\""],
    status: "completed",
    createdAt: new Date(Date.now() - 1200000).toISOString(), // 20 minutes ago
    definitionId: "shell-script-test",
    duration: 2000, // 2 seconds
    logs: [
      "> sh -c \"echo 'Starting shell test'; whoami; pwd; ls -la /; echo 'Shell test completed successfully'\"",
      "Starting shell test",
      "root",
      "/",
      "total 68",
      "drwxr-xr-x    1 root     root          4096 Jul 18 10:30 .",
      "drwxr-xr-x    1 root     root          4096 Jul 18 10:30 ..",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 bin",
      "drwxr-xr-x    5 root     root           360 Jul 18 10:30 dev",
      "drwxr-xr-x    1 root     root          4096 Jul 18 10:30 etc",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 home",
      "drwxr-xr-x    1 root     root          4096 Jun 14 14:30 lib",
      "drwxr-xr-x    5 root     root          4096 Jun 14 14:30 media",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 mnt",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 opt",
      "dr-xr-xr-x  338 root     root             0 Jul 18 10:30 proc",
      "drwx------    2 root     root          4096 Jun 14 14:30 root",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 run",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 sbin",
      "drwxr-xr-x    2 root     root          4096 Jun 14 14:30 srv",
      "dr-xr-xr-x   13 root     root             0 Jul 18 10:30 sys",
      "drwxrwxrwt    2 root     root          4096 Jun 14 14:30 tmp",
      "drwxr-xr-x    7 root     root          4096 Jun 14 14:30 usr",
      "drwxr-xr-x   12 root     root          4096 Jun 14 14:30 var",
      "Shell test completed successfully",
      "",
      "✅ Test completed successfully"
    ],
  },
  {
    id: "working-network-test-run",
    name: "Network Connectivity Test - Working Example",
    image: "alpine:latest",
    command: ["sh -c \"apk add --no-cache curl && curl -f -s https://httpbin.org/json && echo 'Network test passed'\""],
    status: "completed",
    createdAt: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago
    definitionId: "network-connectivity-test",
    duration: 10000, // 10 seconds
    logs: [
      "> sh -c \"apk add --no-cache curl && curl -f -s https://httpbin.org/json && echo 'Network test passed'\"",
      "fetch https://dl-cdn.alpinelinux.org/alpine/v3.18/main/x86_64/APKINDEX.tar.gz",
      "fetch https://dl-cdn.alpinelinux.org/alpine/v3.18/community/x86_64/APKINDEX.tar.gz",
      "(1/5) Installing ca-certificates (20230506-r0)",
      "(2/5) Installing brotli-libs (1.0.9-r14)",
      "(3/5) Installing libunistring (1.1-r1)",
      "(4/5) Installing libidn2 (2.3.4-r1)",
      "(5/5) Installing curl (8.1.2-r0)",
      "Executing busybox-1.36.1-r0.trigger",
      "Executing ca-certificates-20230506-r0.trigger",
      "OK: 11 MiB in 20 packages",
      "{",
      "  \"slideshow\": {",
      "    \"author\": \"Yours Truly\",",
      "    \"date\": \"date of publication\",",
      "    \"slides\": [",
      "      {",
      "        \"title\": \"Wake up to WonderWidgets!\",",
      "        \"type\": \"all\"",
      "      },",
      "      {",
      "        \"items\": [",
      "          \"Why <em>WonderWidgets</em> are great\",",
      "          \"Who <em>buys</em> WonderWidgets\"",
      "        ],",
      "        \"title\": \"Overview\",",
      "        \"type\": \"all\"",
      "      }",
      "    ],",
      "    \"title\": \"Sample Slide Show\"",
      "  }",
      "}",
      "Network test passed",
      "",
      "✅ Test completed successfully"
    ],
  },
]

// Sample Executors
export const sampleExecutors: Executor[] = [
  {
    id: "jest-executor",
    name: "Jest Test Runner",
    image: "node:18-alpine",
    description: "Run JavaScript/TypeScript unit tests using Jest testing framework.",
    command: ["npm", "run", "test"],
    supportedFileTypes: ["js", "ts", "json"],
    env: {
      NODE_ENV: "test",
      CI: "true",
    },
    createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
  },
  {
    id: "cypress-executor",
    name: "Cypress E2E Runner",
    image: "cypress/included:12.17.4",
    description: "Run end-to-end tests using Cypress testing framework.",
    command: ["npx", "cypress", "run"],
    supportedFileTypes: ["js", "ts", "json"],
    env: {
      CYPRESS_baseUrl: "http://localhost:3000",
      CYPRESS_RECORD_KEY: "",
    },
    createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
  },
  {
    id: "pytest-executor",
    name: "Pytest Runner",
    image: "python:3.11-slim",
    description: "Run Python unit and integration tests using pytest framework.",
    command: ["pytest", "--verbose", "--junit-xml=test-results.xml"],
    supportedFileTypes: ["py", "yaml", "json"],
    env: {
      PYTHONPATH: "/app",
      PYTEST_CURRENT_TEST: "",
    },
    createdAt: new Date(Date.now() - 259200000).toISOString(), // 3 days ago
  },
  {
    id: "k6-executor",
    name: "K6 Load Test Runner",
    image: "grafana/k6:latest",
    description: "Run performance and load tests using K6 framework.",
    command: ["k6", "run", "--out", "json=results.json"],
    supportedFileTypes: ["js", "json"],
    env: {
      K6_WEB_DASHBOARD: "true",
      K6_WEB_DASHBOARD_EXPORT: "test-report.html",
    },
    createdAt: new Date(Date.now() - 345600000).toISOString(), // 4 days ago
  },
  {
    id: "playwright-executor",
    name: "Playwright Test Runner",
    image: "mcr.microsoft.com/playwright:v1.40.0-focal",
    description: "Run cross-browser end-to-end tests using Playwright.",
    command: ["npx", "playwright", "test"],
    supportedFileTypes: ["js", "ts", "json"],
    env: {
      PLAYWRIGHT_BROWSERS_PATH: "/ms-playwright",
      PLAYWRIGHT_HTML_REPORT: "playwright-report",
    },
    createdAt: new Date(Date.now() - 432000000).toISOString(), // 5 days ago
  },
  {
    id: "postman-executor",
    name: "Postman Collection Runner",
    image: "postman/newman:alpine",
    description: "Run API tests using Postman collections with Newman.",
    command: ["newman", "run", "--reporters", "cli,json"],
    supportedFileTypes: ["json"],
    env: {
      NEWMAN_REPORTER_JSON_EXPORT: "test-results.json",
    },
    createdAt: new Date(Date.now() - 518400000).toISOString(), // 6 days ago
  },
  {
    id: "github-actions-executor",
    name: "GitHub Actions Runner",
    image: "ghcr.io/actions/actions-runner:latest",
    description: "Run tests in GitHub Actions compatible environment.",
    command: ["./run.sh"],
    supportedFileTypes: ["yaml", "yml", "json"],
    env: {
      GITHUB_ACTIONS: "true",
      RUNNER_OS: "Linux",
    },
    createdAt: new Date(Date.now() - 604800000).toISOString(), // 7 days ago
  },
  {
    id: "docker-executor",
    name: "Docker Container Runner",
    image: "docker:latest",
    description: "Run tests in isolated Docker containers with custom configurations.",
    command: ["docker", "run", "--rm"],
    supportedFileTypes: ["dockerfile", "yaml", "sh"],
    env: {
      DOCKER_BUILDKIT: "1",
    },
    createdAt: new Date(Date.now() - 691200000).toISOString(), // 8 days ago
  },
]
