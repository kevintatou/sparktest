"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[218],{6379:function(t,e,a){a.d(e,{z:function(){return l}});var i=a(9205),n=a(1470),s=a(952),r=a(9549),o=a(7999);let c=(0,r.j)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),l=n.forwardRef((t,e)=>{let{className:a,variant:n,size:r,asChild:l=!1,...d}=t,u=l?s.g7:"button";return(0,i.jsx)(u,{className:(0,o.cn)(c({variant:n,size:r,className:a})),ref:e,...d})});l.displayName="Button"},5338:function(t,e,a){a.d(e,{t:function(){return g}});var i=a(7999);let n=[{id:"api-suite",name:"API Test Suite",description:"Complete API testing including auth, CRUD operations, and error handling",testDefinitionIds:["api-integration-tests","security-scan","performance-tests"],createdAt:new Date(Date.now()-864e5).toISOString(),executionMode:"sequential",labels:["api","backend"]},{id:"e2e-suite",name:"End-to-End Suite",description:"Full user journey testing across the application",testDefinitionIds:["e2e-tests","frontend-unit-tests"],createdAt:new Date(Date.now()-1728e5).toISOString(),executionMode:"sequential",labels:["e2e","frontend"]},{id:"performance-suite",name:"Performance Test Suite",description:"Load testing and performance benchmarks",testDefinitionIds:["performance-tests","database-migration-tests"],createdAt:new Date(Date.now()-2592e5).toISOString(),executionMode:"parallel",labels:["performance","load"]}],s=[{id:"api-integration-tests",name:"API Integration Tests",description:"Comprehensive API testing including authentication, CRUD operations, and error handling",image:"node:18-alpine",commands:["npm install","npm run test:api"],createdAt:new Date(Date.now()-864e5).toISOString(),executorId:"kubernetes",variables:{API_URL:"https://api.example.com",TEST_ENV:"staging"},labels:["api","integration","backend"]},{id:"frontend-unit-tests",name:"Frontend Unit Tests",description:"React component testing with Jest and React Testing Library",image:"node:18-alpine",commands:["npm install","npm run test:unit","npm run test:coverage"],createdAt:new Date(Date.now()-1728e5).toISOString(),executorId:"docker",variables:{NODE_ENV:"test",CI:"true"},labels:["frontend","unit","react"]},{id:"e2e-tests",name:"End-to-End Tests",description:"Full user journey testing with Playwright",image:"mcr.microsoft.com/playwright:v1.40.0-focal",commands:["npm install","npx playwright install","npm run test:e2e"],createdAt:new Date(Date.now()-2592e5).toISOString(),executorId:"kubernetes",variables:{BASE_URL:"https://staging.example.com",HEADLESS:"true"},labels:["e2e","playwright","integration"]},{id:"security-scan",name:"Security Vulnerability Scan",description:"OWASP ZAP security scanning and dependency audit",image:"owasp/zap2docker-stable",commands:["zap-baseline.py","-t","$TARGET_URL","-r","security-report.html"],createdAt:new Date(Date.now()-3456e5).toISOString(),executorId:"docker",variables:{TARGET_URL:"https://staging.example.com"},labels:["security","owasp","scan"]},{id:"performance-tests",name:"Performance Load Tests",description:"Load testing with K6 to ensure application performance under stress",image:"grafana/k6:latest",commands:["k6","run","--vus","50","--duration","5m","performance-test.js"],createdAt:new Date(Date.now()-432e6).toISOString(),executorId:"kubernetes",variables:{BASE_URL:"https://api.example.com",VUS:"50",DURATION:"5m"},labels:["performance","load","k6"]},{id:"database-migration-tests",name:"Database Migration Tests",description:"Test database schema migrations and data integrity",image:"postgres:15-alpine",commands:["./scripts/test-migrations.sh","npm run migrate:test"],createdAt:new Date(Date.now()-5184e5).toISOString(),executorId:"docker",variables:{DATABASE_URL:"postgresql://test:test@localhost:5432/testdb",MIGRATION_PATH:"./migrations"},labels:["database","migration","postgres"]},{id:"github-demo-1",name:"GitHub PR Smoke Test",description:"Runs smoke tests on every pull request using a definition synced from GitHub.",image:"node:18-alpine",commands:["npm ci","npm run test:smoke"],createdAt:new Date(Date.now()-72e5).toISOString(),executorId:"kubernetes",variables:{GITHUB_REPO:"github.com/example/repo",PR_NUMBER:"123"},labels:["github","smoke","pr"]},{id:"github-demo-2",name:"GitHub Nightly E2E",description:"Nightly end-to-end tests auto-registered from a GitHub repo.",image:"mcr.microsoft.com/playwright:v1.40.0-focal",commands:["npm ci","npx playwright install","npm run test:e2e"],createdAt:new Date(Date.now()-864e5).toISOString(),executorId:"kubernetes",variables:{GITHUB_REPO:"github.com/example/repo",SCHEDULE:"nightly"},labels:["github","e2e","nightly"]}],r=[{id:"run-1",name:"API Integration Tests - Production Deploy",image:"node:18-alpine",command:["npm install","npm run test:api"],status:"completed",createdAt:new Date(Date.now()-36e5).toISOString(),definitionId:"api-integration-tests",executorId:"kubernetes",variables:{API_URL:"https://api.example.com",TEST_ENV:"production"},artifacts:["test-results.xml","coverage-report.html"],duration:245e3,logs:["> Starting API integration tests...","> Installing dependencies...","npm install completed in 45s","> Running test suite...","✓ Authentication tests (15 passed)","✓ User management tests (8 passed)","✓ Product API tests (12 passed)","✓ Order processing tests (6 passed)","> All tests passed! 41/41","> Generating coverage report...","> Test completed successfully"]},{id:"run-2",name:"Frontend Unit Tests - Feature Branch",image:"node:18-alpine",command:["npm install","npm run test:unit"],status:"running",createdAt:new Date(Date.now()-18e5).toISOString(),definitionId:"frontend-unit-tests",executorId:"docker",variables:{NODE_ENV:"test",CI:"true"},artifacts:[],logs:["> Starting frontend unit tests...","> Installing dependencies...","npm install completed in 32s","> Running Jest test suite...","✓ Component tests (24 passed)","> Currently running hook tests..."]},{id:"run-3",name:"Security Scan - Weekly Check",image:"owasp/zap2docker-stable",command:["zap-baseline.py","-t","https://staging.example.com"],status:"failed",createdAt:new Date(Date.now()-72e5).toISOString(),definitionId:"security-scan",executorId:"docker",variables:{TARGET_URL:"https://staging.example.com"},artifacts:["security-report.html","zap-session.data"],duration:18e4,logs:["> Starting OWASP ZAP security scan...","> Target: https://staging.example.com","> Running baseline scan...","⚠ Medium risk vulnerability found: X-Frame-Options header missing","⚠ Low risk vulnerability found: X-Content-Type-Options header missing","❌ High risk vulnerability found: SQL injection possible","> Scan completed with 1 high, 1 medium, 1 low risk findings","> Security scan failed - high risk vulnerabilities detected"]},{id:"run-4",name:"E2E Tests - Staging Validation",image:"mcr.microsoft.com/playwright:v1.40.0-focal",command:["npm install","npx playwright install","npm run test:e2e"],status:"completed",createdAt:new Date(Date.now()-108e5).toISOString(),definitionId:"e2e-tests",executorId:"kubernetes",variables:{BASE_URL:"https://staging.example.com",HEADLESS:"true"},artifacts:["playwright-report.html","test-results.json"],duration:42e4,logs:["> Starting end-to-end tests...","> Installing Playwright browsers...","> Running test scenarios...","✓ User login flow (3 tests passed)","✓ Product browsing (5 tests passed)","✓ Shopping cart (4 tests passed)","✓ Checkout process (6 tests passed)","> All E2E tests passed! 18/18","> Test completed successfully"]},{id:"run-5",name:"Performance Tests - Load Testing",image:"grafana/k6:latest",command:["k6","run","--vus","50","--duration","5m","performance-test.js"],status:"completed",createdAt:new Date(Date.now()-144e5).toISOString(),definitionId:"performance-tests",executorId:"kubernetes",variables:{BASE_URL:"https://api.example.com",VUS:"50",DURATION:"5m"},artifacts:["performance-report.json","metrics.csv"],duration:3e5,logs:["> Starting K6 performance tests...","> Ramping up to 50 virtual users...","> Running load test for 5 minutes...","✓ http_req_duration: avg=245ms p95=890ms","✓ http_req_rate: 1247 requests/second","✓ http_req_failed: 0.02% error rate","> Performance targets met","> Load test completed successfully"]}],o=[{id:"kubernetes",name:"Kubernetes Job",image:"k8s-job-runner:latest",description:"Run tests as Kubernetes Jobs with full isolation and cluster context.",command:["npm","run","test"],supportedFileTypes:["js","json","yaml"],env:{NODE_ENV:"test"},createdAt:new Date(Date.now()-864e5).toISOString()},{id:"docker",name:"Docker Container",image:"docker-runner:stable",description:"Execute your test inside a Docker container locally or remotely.",command:["run-tests.sh"],supportedFileTypes:["sh","py"],env:{},createdAt:new Date(Date.now()-432e5).toISOString()}];class c{async getExecutors(){return(0,i.L2)("sparktest_executors",o)}async saveExecutor(t){let e=await this.getExecutors(),a=e.findIndex(e=>e.id===t.id);return a>=0?e[a]=t:e.push(t),(0,i.Pp)("sparktest_executors",e),t}async deleteExecutor(t){let e=(await this.getExecutors()).filter(e=>e.id!==t);return(0,i.Pp)("sparktest_executors",e),!0}async getExecutorById(t){return(await this.getExecutors()).find(e=>e.id===t)}async getDefinitions(){return(0,i.L2)("sparktest_definitions",s)}async saveDefinition(t){let e=await this.getDefinitions(),a=e.findIndex(e=>e.id===t.id);return a>=0?e[a]=t:e.push(t),(0,i.Pp)("sparktest_definitions",e),t}async deleteDefinition(t){let e=(await this.getDefinitions()).filter(e=>e.id!==t);return(0,i.Pp)("sparktest_definitions",e),!0}async getDefinitionById(t){return(await this.getDefinitions()).find(e=>e.id===t)}async getRuns(){return console.log((0,i.L2)("sparktest_runs",r)),(0,i.L2)("sparktest_runs",r)}async saveRun(t){let e=await this.getRuns(),a=e.findIndex(e=>e.id===t.id);return a>=0?e[a]=t:e.unshift(t),(0,i.Pp)("sparktest_runs",e.slice(0,50)),t}async deleteRun(t){let e=(await this.getRuns()).filter(e=>e.id!==t);return(0,i.Pp)("sparktest_runs",e),!0}async getRunById(t){return(await this.getRuns()).find(e=>e.id===t)}async createRun(t,e){let a=await this.getDefinitionById(t);if(!a)throw Error("Definition not found");let i={id:"test-".concat(Date.now()),name:(null==e?void 0:e.name)||"".concat(a.name," Run"),image:(null==e?void 0:e.image)||a.image,command:(null==e?void 0:e.commands)||a.commands,status:"running",createdAt:new Date().toISOString(),definitionId:a.id,executorId:a.executorId,variables:a.variables||{},artifacts:[],logs:["> Starting test..."]};return this.saveRun(i)}subscribeToRuns(t){let e=[],a=setInterval(async()=>{try{let a=await this.getRuns();for(let i of a.filter(t=>!e.some(e=>e.id===t.id)))t({eventType:"INSERT",new:i});for(let i of a){let a=e.find(t=>t.id===i.id);a&&JSON.stringify(a)!==JSON.stringify(i)&&t({eventType:"UPDATE",new:i})}for(let i of e.filter(t=>!a.some(e=>e.id===t.id)))t({eventType:"DELETE",old:i});e=a}catch(t){console.error("Polling error in subscribeToRuns:",t)}},1e4);return()=>clearInterval(a)}async getTestSuites(){return(0,i.L2)("sparktest_test_suites",n)}async saveTestSuite(t){let e=await this.getTestSuites(),a=e.findIndex(e=>e.id===t.id);return a>=0?e[a]=t:e.push(t),(0,i.Pp)("sparktest_test_suites",e),t}async deleteTestSuite(t){let e=(await this.getTestSuites()).filter(e=>e.id!==t);return(0,i.Pp)("sparktest_test_suites",e),!0}async getTestSuiteById(t){return(await this.getTestSuites()).find(e=>e.id===t)}async getKubernetesHealth(){throw Error("Kubernetes integration not available in local storage mode")}async getTestRunLogs(t){throw Error("Kubernetes integration not available in local storage mode")}async getJobLogs(t){throw Error("Kubernetes integration not available in local storage mode")}async getJobStatus(t){throw Error("Kubernetes integration not available in local storage mode")}async deleteJob(t){throw Error("Kubernetes integration not available in local storage mode")}initialize(){localStorage.getItem("sparktest_executors")||(0,i.Pp)("sparktest_executors",o),localStorage.getItem("sparktest_definitions")||(0,i.Pp)("sparktest_definitions",s),localStorage.getItem("sparktest_runs")||(0,i.Pp)("sparktest_runs",r),localStorage.getItem("sparktest_test_suites")||(0,i.Pp)("sparktest_test_suites",n)}}let l="http://localhost:3001/api";class d{async getExecutors(){let t=await fetch("".concat(l,"/test-executors"));if(!t.ok)throw Error("Failed to fetch executors");return await t.json()}async saveExecutor(t){let e=await fetch("".concat(l,"/test-executors"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw Error("Failed to save executor");return await e.json()}async deleteExecutor(t){return(await fetch("".concat(l,"/test-executors/").concat(t),{method:"DELETE"})).ok}async getExecutorById(t){return(await this.getExecutors()).find(e=>e.id===t)}async getDefinitions(){let t=await fetch("".concat(l,"/test-definitions"));if(!t.ok)throw Error("Failed to fetch definitions");return await t.json()}async saveDefinition(t){let e=await fetch("".concat(l,"/test-definitions"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw Error("Failed to save definition");return await e.json()}async deleteDefinition(t){return(await fetch("".concat(l,"/test-definitions/").concat(t),{method:"DELETE"})).ok}async getDefinitionById(t){return(await this.getDefinitions()).find(e=>e.id===t)}async getRuns(){let t=await fetch("".concat(l,"/test-runs"));if(!t.ok)throw Error("Failed to fetch runs");return(await t.json()).map(t=>{let{created_at:e,...a}=t,i="";return e&&!isNaN(new Date(e).getTime())&&(i=new Date(e).toISOString()),{...a,createdAt:i}}).filter(t=>!!t.createdAt&&!isNaN(new Date(t.createdAt).getTime())).sort((t,e)=>new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime())}async getRunById(t){return(await this.getRuns()).find(e=>e.id===t)}async saveRun(t){let e=t.id?"PUT":"POST",a=t.id?"".concat(l,"/test-runs/").concat(t.id):"".concat(l,"/test-runs"),i={...t,created_at:t.createdAt,definition_id:t.definitionId,executor_id:t.executorId};delete i.createdAt,delete i.definitionId,delete i.executorId;let n=await fetch(a,{method:e,headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(!n.ok)throw Error("Failed to save run");return await n.json()}async deleteRun(t){return(await fetch("".concat(l,"/test-runs/").concat(t),{method:"DELETE"})).ok}subscribeToRuns(t){let e=[],a=setInterval(async()=>{try{let a=await this.getRuns();for(let i of a.filter(t=>!e.some(e=>e.id===t.id)))t({eventType:"INSERT",new:i});for(let i of a){let a=e.find(t=>t.id===i.id);a&&JSON.stringify(a)!==JSON.stringify(i)&&t({eventType:"UPDATE",new:i})}for(let i of e.filter(t=>!a.some(e=>e.id===t.id)))t({eventType:"DELETE",old:i});e=a}catch(t){console.error("subscribeToRuns error:",t)}},5e3);return()=>clearInterval(a)}async createRun(t,e){let a={test_definition_id:t,...e},i=await fetch("".concat(l,"/test-runs"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!i.ok)throw Error("Failed to create test run");return await i.json()}async getTestSuites(){let t=await fetch("".concat(l,"/test-suites"));if(!t.ok)throw Error("Failed to fetch test suites");return(await t.json()).map(t=>({id:t.id,name:t.name,description:t.description||"",testDefinitionIds:t.test_definition_ids||[],executionMode:t.execution_mode,createdAt:t.created_at||new Date().toISOString(),labels:t.labels||[]}))}async saveTestSuite(t){let e=t.id?"PUT":"POST",a=t.id?"".concat(l,"/test-suites/").concat(t.id):"".concat(l,"/test-suites"),i={...t,id:t.id||"00000000-0000-0000-0000-000000000000",execution_mode:t.executionMode,test_definition_ids:t.testDefinitionIds.map(t=>/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(t)?t:"00000000-0000-0000-0000-".concat(t.padStart(12,"0").substring(0,12))),labels:t.labels||[],description:t.description||"",created_at:t.createdAt||new Date().toISOString()};delete i.executionMode,delete i.testDefinitionIds,delete i.createdAt;let n=await fetch(a,{method:e,headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(!n.ok)throw Error("Failed to save test suite");return await n.json()}async deleteTestSuite(t){let e=t;return/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(t)||(e="00000000-0000-0000-0000-".concat(t.padStart(12,"0").substring(0,12))),(await fetch("".concat(l,"/test-suites/").concat(e),{method:"DELETE"})).ok}async getTestSuiteById(t){let e=t;/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(t)||(e="00000000-0000-0000-0000-".concat(t.padStart(12,"0").substring(0,12)));let a=await fetch("".concat(l,"/test-suites/").concat(e));if(!a.ok)throw Error("Failed to fetch test suite");let i=await a.json();return{id:i.id,name:i.name,description:i.description||"",testDefinitionIds:i.test_definition_ids||[],executionMode:i.execution_mode,createdAt:i.created_at||new Date().toISOString(),labels:i.labels||[]}}async getKubernetesHealth(){let t=await fetch("".concat(l,"/k8s/health"));if(!t.ok)throw Error("Failed to check Kubernetes health");return await t.json()}async getTestRunLogs(t){let e=await fetch("".concat(l,"/test-runs/").concat(t,"/logs"));if(!e.ok)throw Error("Failed to fetch logs for test run ".concat(t));return await e.json()}async getJobLogs(t){let e=await fetch("".concat(l,"/k8s/jobs/").concat(t,"/logs"));if(!e.ok)throw Error("Failed to fetch logs for job ".concat(t));return await e.json()}async getJobStatus(t){let e=await fetch("".concat(l,"/k8s/jobs/").concat(t,"/status"));if(!e.ok)throw Error("Failed to fetch status for job ".concat(t));return await e.json()}async deleteJob(t){let e=await fetch("".concat(l,"/k8s/jobs/").concat(t),{method:"DELETE"});if(!e.ok)throw Error("Failed to delete job ".concat(t));return await e.json()}initialize(){}}class u{async tryApiWithFallback(t,e){try{return await t()}catch(t){return console.warn("API call failed, falling back to local storage:",t),await e()}}async getExecutors(){return this.tryApiWithFallback(()=>this.apiStorage.getExecutors(),()=>this.localStorage.getExecutors())}async saveExecutor(t){return this.tryApiWithFallback(()=>this.apiStorage.saveExecutor(t),()=>this.localStorage.saveExecutor(t))}async deleteExecutor(t){return this.tryApiWithFallback(()=>this.apiStorage.deleteExecutor(t),()=>this.localStorage.deleteExecutor(t))}async getExecutorById(t){return this.tryApiWithFallback(()=>this.apiStorage.getExecutorById(t),()=>this.localStorage.getExecutorById(t))}async getDefinitions(){return this.tryApiWithFallback(()=>this.apiStorage.getDefinitions(),()=>this.localStorage.getDefinitions())}async saveDefinition(t){return this.tryApiWithFallback(()=>this.apiStorage.saveDefinition(t),()=>this.localStorage.saveDefinition(t))}async deleteDefinition(t){return this.tryApiWithFallback(()=>this.apiStorage.deleteDefinition(t),()=>this.localStorage.deleteDefinition(t))}async getDefinitionById(t){return this.tryApiWithFallback(()=>this.apiStorage.getDefinitionById(t),()=>this.localStorage.getDefinitionById(t))}async getRuns(){return this.tryApiWithFallback(()=>this.apiStorage.getRuns(),()=>this.localStorage.getRuns())}async saveRun(t){return this.tryApiWithFallback(()=>this.apiStorage.saveRun(t),()=>this.localStorage.saveRun(t))}async deleteRun(t){return this.tryApiWithFallback(()=>this.apiStorage.deleteRun(t),()=>this.localStorage.deleteRun(t))}async getRunById(t){return this.tryApiWithFallback(()=>this.apiStorage.getRunById(t),()=>this.localStorage.getRunById(t))}async createRun(t,e){return this.tryApiWithFallback(()=>this.apiStorage.createRun(t,e),()=>this.localStorage.createRun(t,e))}subscribeToRuns(t){try{let e=this.apiStorage.subscribeToRuns(t);if("function"==typeof e)return e;return this.localStorage.subscribeToRuns(t)}catch(e){console.warn("API subscription failed, falling back to local storage:",e);try{let e=this.localStorage.subscribeToRuns(t);if("function"==typeof e)return e}catch(t){}return()=>{}}}async getTestSuites(){return this.tryApiWithFallback(()=>this.apiStorage.getTestSuites(),()=>this.localStorage.getTestSuites())}async saveTestSuite(t){return this.tryApiWithFallback(()=>this.apiStorage.saveTestSuite(t),()=>this.localStorage.saveTestSuite(t))}async deleteTestSuite(t){return this.tryApiWithFallback(()=>this.apiStorage.deleteTestSuite(t),()=>this.localStorage.deleteTestSuite(t))}async getTestSuiteById(t){return this.tryApiWithFallback(()=>this.apiStorage.getTestSuiteById(t),()=>this.localStorage.getTestSuiteById(t))}async getKubernetesHealth(){return this.tryApiWithFallback(()=>this.apiStorage.getKubernetesHealth(),()=>this.localStorage.getKubernetesHealth())}async getTestRunLogs(t){return this.tryApiWithFallback(()=>this.apiStorage.getTestRunLogs(t),()=>this.localStorage.getTestRunLogs(t))}async getJobLogs(t){return this.tryApiWithFallback(()=>this.apiStorage.getJobLogs(t),()=>this.localStorage.getJobLogs(t))}async getJobStatus(t){return this.tryApiWithFallback(()=>this.apiStorage.getJobStatus(t),()=>this.localStorage.getJobStatus(t))}async deleteJob(t){return this.tryApiWithFallback(()=>this.apiStorage.deleteJob(t),()=>this.localStorage.deleteJob(t))}async initialize(){await this.apiStorage.initialize(),await this.localStorage.initialize()}constructor(){this.apiStorage=new d,this.localStorage=new c}}let g="true"===a(2608).env.NEXT_PUBLIC_USE_RUST_API?new u:new c},7999:function(t,e,a){a.d(e,{L2:function(){return o},Pp:function(){return c},QN:function(){return r},cn:function(){return s}});var i=a(3572),n=a(1496);function s(){for(var t=arguments.length,e=Array(t),a=0;a<t;a++)e[a]=arguments[a];return(0,n.m6)((0,i.W)(e))}function r(t){let e=new Date(t),a=Math.floor((new Date().getTime()-e.getTime())/1e3);if(a<60)return"".concat(a," seconds ago");let i=Math.floor(a/60);if(i<60)return"".concat(i," minute").concat(1===i?"":"s"," ago");let n=Math.floor(i/60);if(n<24)return"".concat(n," hour").concat(1===n?"":"s"," ago");let s=Math.floor(n/24);return"".concat(s," day").concat(1===s?"":"s"," ago")}function o(t,e){try{let a=localStorage.getItem(t);return a?JSON.parse(a):e}catch(t){return e}}function c(t,e){try{localStorage.setItem(t,JSON.stringify(e))}catch(t){console.error("Failed to save to localStorage:",t)}}}}]);