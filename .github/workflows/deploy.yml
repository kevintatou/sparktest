name: Deploy to Droplet

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          echo "🔍 Validating deployment configuration..."
          
          # Check if required secrets are set
          if [ -z "${{ secrets.DROPLET_IP }}" ]; then
            echo "❌ Error: DROPLET_IP secret is not set"
            echo "Set it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "❌ Error: SSH_PRIVATE_KEY secret is not set"  
            echo "Set it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          # DROPLET_USER is optional, defaults to root
          DROPLET_USER="${{ secrets.DROPLET_USER }}"
          if [ -z "$DROPLET_USER" ]; then
            DROPLET_USER="root"
            echo "⚠️  DROPLET_USER not set, using default: root"
          else
            echo "✅ DROPLET_USER configured: $DROPLET_USER"
          fi
          
          echo "✅ All required secrets are configured"
          echo "📍 Deploying to: $DROPLET_USER@${{ secrets.DROPLET_IP }}"

      - name: Copy files to droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER || 'root' }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "~/sparktest"

      - name: Deploy on droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER || 'root' }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ~/sparktest

            echo "🔍 Checking Docker availability..."
            if ! command -v docker &> /dev/null; then
              echo "❌ Error: Docker is not installed on the droplet"
              exit 1
            fi

            if ! docker info &> /dev/null; then
              echo "❌ Error: Docker service is not running"
              exit 1
            fi

            echo "📦 Deploying application..."
            # Pull latest images if available
            docker compose -f .deploy/docker-compose.yml pull || echo "⚠️  Could not pull latest images"
            
            # Deploy with build and detached mode
            if ! docker compose -f .deploy/docker-compose.yml up --build -d; then
              echo "❌ Error: Failed to deploy application"
              echo "📋 Checking logs for errors..."
              docker compose -f .deploy/docker-compose.yml logs --tail 20
              exit 1
            fi

            echo "✅ Application deployed successfully!"
            echo "📋 Container status:"
            docker compose -f .deploy/docker-compose.yml ps

      - name: Deployment summary
        if: always()
        run: |
          echo "🎉 Application deployment workflow completed!"
          echo ""
          echo "📊 Deployment status: ${{ job.status }}"
          echo ""
          if [ "${{ job.status }}" != "success" ]; then
            echo "❌ Deployment failed. Common issues:"
            echo "- SSH connection problems"
            echo "- Docker not available on droplet"
            echo "- Insufficient resources on droplet"
            echo "- Docker Compose configuration issues"
            echo ""
            echo "🔧 To troubleshoot:"
            echo "- Check droplet connectivity and Docker status"
            echo "- Verify Docker Compose file exists and is valid"
            echo "- Review action logs above for specific errors"
            echo "- Check available disk space and memory on droplet"
          else
            echo "✅ Application should now be running on the droplet"
            echo "🔗 Check your application at the configured domain/IP"
          fi
