name: Deploy SparkTest MVP to Droplet

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: [self-hosted, spark-runner]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check Docker availability
        run: |
          echo "🐳 Checking Docker availability..."
          echo "Current user: $(whoami)"
          echo "User groups: $(groups)"
          echo ""
          
          # Check if docker command exists
          if command -v docker &> /dev/null; then
            echo "✅ Docker command found"
            docker --version
          else
            echo "❌ Docker command not found"
            exit 1
          fi
          
          # Test Docker daemon access with better error handling
          echo "Testing Docker daemon access..."
          if docker info &> /dev/null; then
            echo "✅ Docker daemon accessible"
          else
            echo "⚠️  Docker daemon access issue, trying with newgrp..."
            # Try to refresh group membership and test again
            if newgrp docker <<< 'docker info' &> /dev/null; then
              echo "✅ Docker access working after group refresh"
            else
              echo "ℹ️  Docker socket info:"
              ls -la /var/run/docker.sock 2>/dev/null || echo "Docker socket not found"
              echo "ℹ️  Current user groups: $(groups)"
              echo "ℹ️  Docker group members:"
              getent group docker 2>/dev/null || echo "Docker group not found"
              
              # Try to fix permissions and test one more time
              echo "🔧 Attempting to fix Docker access..."
              sudo chown :docker /var/run/docker.sock 2>/dev/null || true
              sudo chmod 666 /var/run/docker.sock 2>/dev/null || true
              
              if docker info &> /dev/null; then
                echo "✅ Docker access fixed"
              else
                echo "❌ Still cannot access Docker daemon"
                echo "💡 This might be a container setup issue"
                # Don't exit here, let's try to continue
              fi
            fi
          fi

      - name: Validate deployment environment
        run: |
          echo "🔍 Validating deployment configuration..."
          
          # Test Docker functionality
          echo "🐳 Testing Docker functionality..."
          if docker info &> /dev/null; then
            echo "✅ Docker is working correctly"
            docker version --format 'Docker version: {{.Server.Version}}'
          else
            echo "❌ Docker is not working properly"
            exit 1
          fi
          
          # Test Docker Compose
          echo "� Testing Docker Compose..."
          if docker compose version &> /dev/null; then
            echo "✅ Docker Compose is available"
            docker compose version
          else
            echo "❌ Docker Compose not found or not working"
            exit 1
          fi
          
          echo "📍 Deploying SparkTest MVP from release: ${{ github.event.release.tag_name || 'manual-deploy' }}"
      - name: Deploy SparkTest MVP
        run: |
          set -e

          echo "🧹 Cleaning up existing deployment..."
          # Stop and remove existing containers (don't fail if nothing exists)
          docker compose -f docker-compose.prod.yml down --remove-orphans || echo "ℹ️  No existing deployment found to clean up"

          # Remove old images to free space (keep last 2 versions)
          echo "🗑️  Cleaning up old Docker images..."
          docker image prune -f || echo "ℹ️  No images to prune"

          echo "📦 Building and deploying SparkTest MVP..."
          # Build and start services with better error handling
          if ! docker compose -f docker-compose.prod.yml up --build -d; then
            echo "❌ Error: Failed to deploy SparkTest MVP"
            echo "🔧 Attempting diagnosis..."
            
            # Show docker compose version for debugging
            docker compose version || echo "Could not get docker compose version"
            
            # Check if docker-compose.prod.yml exists and is valid
            if [ ! -f "docker-compose.prod.yml" ]; then
              echo "❌ docker-compose.prod.yml not found!"
              ls -la *.yml *.yaml || echo "No YAML files found"
              exit 1
            fi
            
            echo "📋 Docker compose config validation:"
            docker compose -f docker-compose.prod.yml config --quiet || echo "Config validation failed"
            
            echo "📋 Checking logs for errors..."
            docker compose -f docker-compose.prod.yml logs --tail 50 || echo "Could not get logs"
            
            echo "📋 System resources:"
            df -h || echo "Could not check disk space"
            free -h || echo "Could not check memory"
            
            exit 1
          fi

          echo "⏳ Waiting for services to be healthy..."
          sleep 45

          # Check service health with timeout
          echo "📋 Service status:"
          if ! docker compose -f docker-compose.prod.yml ps; then
            echo "⚠️  Could not get service status, trying with different approach..."
            docker ps -a || echo "Could not list containers"
          fi

          echo "📋 Recent logs:"
          docker compose -f docker-compose.prod.yml logs --tail 20 || echo "Could not get recent logs"

          # Get server IP
          SERVER_IP=$(hostname -I | awk '{print $1}' || echo "localhost")

          echo "✅ SparkTest MVP deployed successfully!"
          echo "🌐 Frontend: http://$SERVER_IP"
          echo "🔧 Backend API: http://$SERVER_IP:8080"

      - name: Deployment summary
        if: always()
        run: |
          echo "🎉 SparkTest MVP deployment workflow completed!"
          echo ""
          echo "📊 Deployment status: ${{ job.status }}"
          echo "🏷️  Release version: ${{ github.event.release.tag_name }}"
          echo ""
          if [ "${{ job.status }}" != "success" ]; then
            echo "❌ Deployment failed. Common issues:"
            echo "- Docker not available or not running"
            echo "- Insufficient resources (CPU/Memory/Disk)"
            echo "- Port conflicts (80, 8080 already in use)"
            echo "- Build failures in Rust or Node.js"
            echo ""
            echo "🔧 To troubleshoot:"
            echo "- Check runner system resources"
            echo "- Verify Docker and Docker Compose installation"
            echo "- Review action logs above for specific errors"
            echo "- Check available ports: sudo netstat -tlnp | grep ':80\\|:8080'"
          else
            echo "✅ SparkTest MVP is now running!"
            echo ""
            echo "🌐 Access your application:"
            echo "   Frontend: http://$(hostname -I | awk '{print $1}'):80"
            echo "   Backend API: http://$(hostname -I | awk '{print $1}'):8080"
            echo ""
            echo "🔧 Management commands:"
            echo "   View logs: docker compose -f docker-compose.prod.yml logs -f"
            echo "   Stop services: docker compose -f docker-compose.prod.yml down"
            echo "   Restart: docker compose -f docker-compose.prod.yml restart"
            fi
