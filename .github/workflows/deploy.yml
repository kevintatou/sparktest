name: Deploy SparkTest MVP to Droplet

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: [self-hosted, spark-runner]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Docker if needed
        run: |
          echo "üê≥ Ensuring Docker is available..."

          # Check if Docker is already installed and working
          if command -v docker &> /dev/null && docker info &> /dev/null 2>&1; then
            echo "‚úÖ Docker is already installed and working"
            docker --version
          elif command -v docker &> /dev/null && sudo docker info &> /dev/null 2>&1; then
            echo "‚úÖ Docker is installed but requires sudo access"
            docker --version
          else
            echo "üì¶ Installing Docker..."
            
            # Update package index
            sudo apt-get update -y
            
            # Install prerequisites
            sudo apt-get install -y \
              ca-certificates \
              curl \
              gnupg \
              lsb-release
            
            # Install Docker using the official installation script
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            rm get-docker.sh

            echo "‚úÖ Docker installation completed"
            docker --version || sudo docker --version
          fi

          # Add current user to docker group (always run this to ensure membership)
          echo "üë• Ensuring user is in docker group..."
          sudo usermod -aG docker $USER
          
          # Start and enable Docker service
          echo "üîß Starting Docker service..."
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Wait for Docker service to be fully ready
          echo "‚è≥ Waiting for Docker service to be ready..."
          for i in {1..30}; do
            if sudo docker info &> /dev/null; then
              echo "‚úÖ Docker service is ready after $i seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Docker service failed to start within 30 seconds"
              sudo systemctl status docker
              exit 1
            fi
            sleep 1
          done

          echo "‚úÖ Docker setup completed"

      - name: Validate deployment environment
        run: |
          echo "üîç Validating deployment configuration..."

          # Test Docker availability with comprehensive detection
          echo "üê≥ Testing Docker access methods..."
          
          DOCKER_WORKS_WITHOUT_SUDO=false
          DOCKER_WORKS_WITH_SUDO=false
          
          # Test Docker without sudo
          if command -v docker &> /dev/null && timeout 10 docker info &> /dev/null; then
            echo "‚úÖ Docker works without sudo"
            DOCKER_WORKS_WITHOUT_SUDO=true
          else
            echo "‚ö†Ô∏è  Docker doesn't work without sudo (expected after fresh installation)"
          fi
          
          # Test Docker with sudo
          if command -v docker &> /dev/null && timeout 10 sudo docker info &> /dev/null; then
            echo "‚úÖ Docker works with sudo"
            DOCKER_WORKS_WITH_SUDO=true
          elif timeout 10 sudo docker info &> /dev/null; then
            echo "‚úÖ Docker works with sudo (command not in PATH for current user)"
            DOCKER_WORKS_WITH_SUDO=true
          else
            echo "‚ùå Docker doesn't work even with sudo"
          fi
          
          # Ensure at least one method works
          if [ "$DOCKER_WORKS_WITHOUT_SUDO" = false ] && [ "$DOCKER_WORKS_WITH_SUDO" = false ]; then
            echo "‚ùå Error: Docker is not accessible through any method"
            echo "üîß Attempting to diagnose and fix..."
            
            # Check if Docker daemon is running
            sudo systemctl status docker --no-pager
            
            # Try to start Docker service
            echo "üîß Restarting Docker service..."
            sudo systemctl restart docker
            sleep 10
            
            # Test again after restart
            if timeout 10 sudo docker info &> /dev/null; then
              echo "‚úÖ Docker service started successfully after restart"
              DOCKER_WORKS_WITH_SUDO=true
            else
              echo "‚ùå Error: Docker service still not working after restart"
              sudo journalctl -u docker --no-pager --lines=20
              exit 1
            fi
          fi
          
          # Show Docker version and system info
          echo "üìã Docker information:"
          if [ "$DOCKER_WORKS_WITHOUT_SUDO" = true ]; then
            docker --version
            docker system info --format "{{.ServerVersion}}" || echo "Could not get server version"
          else
            sudo docker --version
            sudo docker system info --format "{{.ServerVersion}}" || echo "Could not get server version"
          fi
          
          echo "üìç Deploying SparkTest MVP from release: ${{ github.event.release.tag_name || 'manual-deploy' }}"
          
          # Verify docker compose is available
          if command -v docker &> /dev/null; then
            if docker compose version &> /dev/null; then
              echo "‚úÖ Docker Compose is available (integrated)"
              docker compose version
            elif sudo docker compose version &> /dev/null; then
              echo "‚úÖ Docker Compose is available (with sudo)"
              sudo docker compose version
            else
              echo "‚ùå Docker Compose not found"
              exit 1
            fi
          fi

      - name: Deploy SparkTest MVP
        run: |
          set -e

          # Function to run docker commands with proper fallback handling
          run_docker() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üê≥ Running: docker $* (attempt $attempt/$max_attempts)"
              
              # Try without sudo first
              if command -v docker &> /dev/null && docker "$@" 2>/dev/null; then
                echo "‚úÖ Docker command succeeded without sudo"
                return 0
              fi
              
              # Try with sudo
              if sudo docker "$@" 2>/dev/null; then
                echo "‚úÖ Docker command succeeded with sudo"
                return 0
              fi
              
              echo "‚ö†Ô∏è  Docker command failed (attempt $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                echo "‚è≥ Waiting 5 seconds before retry..."
                sleep 5
              fi
              attempt=$((attempt + 1))
            done
            
            echo "‚ùå Docker command failed after $max_attempts attempts: docker $*"
            return 1
          }

          # Function to run docker compose commands with proper fallback handling
          run_docker_compose() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üê≥ Running: docker compose $* (attempt $attempt/$max_attempts)"
              
              # Try without sudo first
              if command -v docker &> /dev/null && docker compose "$@" 2>/dev/null; then
                echo "‚úÖ Docker compose command succeeded without sudo"
                return 0
              fi
              
              # Try with sudo
              if sudo docker compose "$@" 2>/dev/null; then
                echo "‚úÖ Docker compose command succeeded with sudo"
                return 0
              fi
              
              echo "‚ö†Ô∏è  Docker compose command failed (attempt $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                echo "‚è≥ Waiting 5 seconds before retry..."
                sleep 5
              fi
              attempt=$((attempt + 1))
            done
            
            echo "‚ùå Docker compose command failed after $max_attempts attempts: docker compose $*"
            return 1
          }

          echo "üßπ Cleaning up existing deployment..."
          # Stop and remove existing containers (don't fail if nothing exists)
          run_docker_compose -f docker-compose.prod.yml down --remove-orphans || echo "‚ÑπÔ∏è  No existing deployment found to clean up"

          # Remove old images to free space (keep last 2 versions)
          echo "üóëÔ∏è  Cleaning up old Docker images..."
          run_docker image prune -f || echo "‚ÑπÔ∏è  No images to prune"

          echo "üì¶ Building and deploying SparkTest MVP..."
          # Build and start services with better error handling
          if ! run_docker_compose -f docker-compose.prod.yml up --build -d; then
            echo "‚ùå Error: Failed to deploy SparkTest MVP"
            echo "üîß Attempting diagnosis..."
            
            # Show docker compose version for debugging
            run_docker_compose version || echo "Could not get docker compose version"
            
            # Check if docker-compose.prod.yml exists and is valid
            if [ ! -f "docker-compose.prod.yml" ]; then
              echo "‚ùå docker-compose.prod.yml not found!"
              ls -la *.yml *.yaml || echo "No YAML files found"
              exit 1
            fi
            
            echo "üìã Docker compose config validation:"
            run_docker_compose -f docker-compose.prod.yml config --quiet || echo "Config validation failed"
            
            echo "üìã Checking logs for errors..."
            run_docker_compose -f docker-compose.prod.yml logs --tail 50 || echo "Could not get logs"
            
            echo "üìã System resources:"
            df -h || echo "Could not check disk space"
            free -h || echo "Could not check memory"
            
            exit 1
          fi

          echo "‚è≥ Waiting for services to be healthy..."
          sleep 45

          # Check service health with timeout
          echo "üìã Service status:"
          if ! run_docker_compose -f docker-compose.prod.yml ps; then
            echo "‚ö†Ô∏è  Could not get service status, trying with different approach..."
            run_docker ps -a || echo "Could not list containers"
          fi

          echo "üìã Recent logs:"
          run_docker_compose -f docker-compose.prod.yml logs --tail 20 || echo "Could not get recent logs"

          # Get server IP
          SERVER_IP=$(hostname -I | awk '{print $1}' || echo "localhost")

          echo "‚úÖ SparkTest MVP deployed successfully!"
          echo "üåê Frontend: http://$SERVER_IP"
          echo "üîß Backend API: http://$SERVER_IP:8080"

      - name: Deployment summary
        if: always()
        run: |
          echo "üéâ SparkTest MVP deployment workflow completed!"
          echo ""
          echo "üìä Deployment status: ${{ job.status }}"
          echo "üè∑Ô∏è  Release version: ${{ github.event.release.tag_name }}"
          echo ""
          if [ "${{ job.status }}" != "success" ]; then
            echo "‚ùå Deployment failed. Common issues:"
            echo "- Docker not available or not running"
            echo "- Insufficient resources (CPU/Memory/Disk)"
            echo "- Port conflicts (80, 8080 already in use)"
            echo "- Build failures in Rust or Node.js"
            echo ""
            echo "üîß To troubleshoot:"
            echo "- Check runner system resources"
            echo "- Verify Docker and Docker Compose installation"
            echo "- Review action logs above for specific errors"
            echo "- Check available ports: sudo netstat -tlnp | grep ':80\\|:8080'"
          else
            echo "‚úÖ SparkTest MVP is now running!"
            echo ""
            echo "üåê Access your application:"
            echo "   Frontend: http://$(hostname -I | awk '{print $1}'):80"
            echo "   Backend API: http://$(hostname -I | awk '{print $1}'):8080"
            echo ""
            echo "üîß Management commands:"
            echo "   View logs: docker compose -f docker-compose.prod.yml logs -f"
            echo "   Stop services: docker compose -f docker-compose.prod.yml down"
            echo "   Restart: docker compose -f docker-compose.prod.yml restart"
          fi
