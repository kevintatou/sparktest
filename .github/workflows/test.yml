name: Test & Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack and install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Build workspace packages
        run: pnpm build:packages

      - name: Run linter
        run: pnpm --filter "@sparktest/oss" lint

      - name: Run type check
        run: pnpm --filter "@sparktest/oss" type-check

      - name: Run tests with coverage
        run: pnpm --filter "@sparktest/oss" test:coverage

      - name: Run E2E tests
        run: pnpm --filter "@sparktest/oss" test:e2e
        env:
          CI: true

      - name: Verify coverage file and show summary
        run: |
          echo "Coverage files generated:"
          ls -la apps/oss/coverage/
          echo "LCOV file size:"
          wc -l apps/oss/coverage/lcov.info
          echo "Coverage files included in LCOV:"
          grep "^SF:" apps/oss/coverage/lcov.info
          echo "Local coverage summary calculation:"
          cd apps/oss && node -e "
          const coverage = require('./coverage/coverage-final.json');
          const files = Object.values(coverage);
          let totalStatements = 0, coveredStatements = 0;
          let totalBranches = 0, coveredBranches = 0;
          let totalFunctions = 0, coveredFunctions = 0;
          let totalLines = 0, coveredLines = 0;

          files.forEach(file => {
            if (file.s) {
              totalStatements += Object.keys(file.s).length;
              coveredStatements += Object.values(file.s).filter(v => v > 0).length;
            }
            if (file.b) {
              Object.values(file.b).forEach(branches => {
                branches.forEach(branch => {
                  totalBranches++;
                  if (branch > 0) coveredBranches++;
                });
              });
            }
            if (file.f) {
              totalFunctions += Object.keys(file.f).length;
              coveredFunctions += Object.values(file.f).filter(v => v > 0).length;
            }
            if (file.statementMap) {
              totalLines += Object.keys(file.statementMap).length;
              coveredLines += Object.keys(file.statementMap).filter(k => file.s && file.s[k] > 0).length;
            }
          });

          console.log('Frontend Coverage Summary:');
          console.log('Lines: ' + (coveredLines/totalLines*100).toFixed(2) + '% (' + coveredLines + '/' + totalLines + ')');
          console.log('Statements: ' + (coveredStatements/totalStatements*100).toFixed(2) + '% (' + coveredStatements + '/' + totalStatements + ')');
          console.log('Branches: ' + (coveredBranches/totalBranches*100).toFixed(2) + '% (' + coveredBranches + '/' + totalBranches + ')');
          console.log('Functions: ' + (coveredFunctions/totalFunctions*100).toFixed(2) + '% (' + coveredFunctions + '/' + totalFunctions + ')');
          "

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/oss/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./apps/oss/coverage/lcov.info
          delete-old-comments: true

  backend-test:
    name: Backend Test & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run backend tests
        run: cargo test --verbose
        working-directory: backend

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        working-directory: backend

      - name: Show backend coverage summary
        run: |
          echo "Backend Coverage Summary:"
          cargo llvm-cov --all-features --workspace --summary-only
        working-directory: backend

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/lcov.info
          flags: backend
          name: codecov-backend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

      - name: Comment PR with backend coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./backend/lcov.info
          delete-old-comments: false
