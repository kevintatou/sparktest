name: Publish Cargo Crates

on:
  push:
    tags:
      - "v*"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build and test
        run: |
          cargo build --verbose
          cargo test --verbose
        working-directory: backend

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Check cargo changeset status
        run: |
          echo "Checking cargo changeset status..."
          ./scripts/cargo-changeset.sh status
          
          # Check if any crates need to be published
          if [[ -d .cargo-changesets ]] && [[ $(find .cargo-changesets -name "*.md" 2>/dev/null | wc -l) -gt 0 ]]; then
            echo "HAS_CARGO_CHANGESETS=true" >> $GITHUB_ENV
          else
            echo "HAS_CARGO_CHANGESETS=false" >> $GITHUB_ENV
            echo "No cargo crates need to be published"
          fi

      - name: Apply changeset versions and publish crates
        if: env.HAS_CARGO_CHANGESETS == 'true'
        run: |
          echo "Applying cargo changesets and publishing..."
          ./scripts/cargo-changeset.sh version
          ./scripts/cargo-changeset.sh publish

      - name: Publish individual crates (fallback for manual tags)
        if: env.HAS_CARGO_CHANGESETS == 'false'
        run: |
          echo "No changesets found, checking if crates need individual publishing..."
          
          # Check each crate individually to see if it needs publishing
          cd backend
          
          # Function to check if a version is already published
          check_and_publish() {
            local crate_name="$1"
            local crate_path="$2"
            
            local version=$(grep '^version = ' "$crate_path/Cargo.toml" | head -1 | sed 's/version = "\(.*\)"/\1/')
            echo "Checking $crate_name v$version..."
            
            # Check if this version is already published
            if cargo search "$crate_name" --limit 1 | grep -q "$crate_name = \"$version\""; then
              echo "âœ… $crate_name v$version already published, skipping"
              return 0
            else
              echo "ðŸ“¦ Publishing $crate_name v$version..."
              cd "$crate_path"
              
              # For api and bin crates, update dependencies to use published versions
              if [[ "$crate_name" == "sparktest-api" ]]; then
                CORE_VERSION=$(grep '^version = ' ../core/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
                sed -i "s/sparktest-core = { path = \"..\/core\" }/sparktest-core = \"$CORE_VERSION\"/" Cargo.toml
              elif [[ "$crate_name" == "sparktest-bin" ]]; then
                CORE_VERSION=$(grep '^version = ' ../core/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
                API_VERSION=$(grep '^version = ' ../api/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
                sed -i "s/sparktest-core = { path = \"..\/core\" }/sparktest-core = \"$CORE_VERSION\"/" Cargo.toml
                sed -i "s/sparktest-api = { path = \"..\/api\" }/sparktest-api = \"$API_VERSION\"/" Cargo.toml
                cp -r ../migrations . 2>/dev/null || true
              fi
              
              cargo publish --allow-dirty
              cd ..
              
              # Wait between publishes for crates.io to update
              if [[ "$crate_name" != "sparktest-bin" ]]; then
                echo "Waiting 30 seconds for crates.io to update..."
                sleep 30
              fi
            fi
          }
          
          # Publish in dependency order
          check_and_publish "sparktest-core" "core"
          check_and_publish "sparktest-api" "api"
          check_and_publish "sparktest-bin" "bin"

      - name: No crates to publish
        if: env.HAS_CARGO_CHANGESETS == 'false'
        run: |
          echo "ðŸŽ‰ All crates are up to date!"
